name: Create Docker images on tag

on:
  workflow_dispatch:
    inputs:
      retag-latest:
        description: 'Retag latest Docker images'
        required: true
        type: string
        default: "true"
        options:
          - "true"
          - "false"
      plugin-version:
        description: 'Plugin version'
        required: false
        type: string
        default: "LATEST"
jobs:
  docker:
    name: Publish docker
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    env:
      PLUGIN_VERSION: ${{ github.event.inputs.plugin-version != null && github.event.inputs.plugin-version || 'LATEST' }}
      DOCKER_APT_PACKAGES: python3 python3-venv python-is-python3 python3-pip nodejs npm curl zip unzip
      DOCKER_PYTHON_LIBRARIES: kestra
    strategy:
      matrix:
        image:
          - name: ""
            packages: ""
            python-libs: ""
          - name: "-full"
            packages: $DOCKER_APT_PACKAGES
            python-libs: $DOCKER_PYTHON_LIBRARIES
    steps:
      - uses: actions/checkout@v4

      # Get Plugins List
      - name: Get Plugins List
        uses: ./.github/actions/plugins-list
        id: plugins-list
        with:
          plugin-version: ${{ env.PLUGIN_VERSION }}

      # Vars
      - name: Set image name
        id: vars
        run: |
          TAG=${GITHUB_REF#refs/*/}
          PLUGINS=""
          
          if [[ "${{ matrix.image.name }}" = "-full" ]]
          then
            PLUGINS = "$PLUGINS ${{ steps.plugins.outputs.plugins }}"
          fi
          
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "plugins=${{ matrix.image.plugins }}" >> $GITHUB_OUTPUT

      # Download release
      - name: Download release
        uses: robinraju/release-downloader@v1.10
        with:
          tag: ${{steps.vars.outputs.tag}}
          fileName: 'kestra-*'
          out-file-path: build/executable

      - name: Copy exe to image
        run: |
          cp build/executable/* docker/app/kestra && chmod +x docker/app/kestra

      # Docker setup
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Docker Login
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker Build and push
      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ format('kestra/kestra:{0}{1}', steps.vars.outputs.tag, matrix.image.name) }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            KESTRA_PLUGINS=${{ steps.vars.outputs.plugins }}
            APT_PACKAGES=${{ matrix.image.packages }}
            PYTHON_LIBRARIES=${{ matrix.image.python-libs }}

      - name: Install regctl
        if: github.event.inputs.retag-latest == 'true'
        uses: regclient/actions/regctl-installer@main

      - name: Retag to latest
        if: github.event.inputs.retag-latest == 'true'
        run: |
          regctl image copy ${{ format('kestra/kestra:{0}{1}', steps.vars.outputs.tag, matrix.image.name) }} ${{ format('kestra/kestra:latest{0}', matrix.image.name) }}

  end:
    runs-on: ubuntu-latest
    needs:
      - docker
    if: always()
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:

      # Slack
      - name: Slack notification
        uses: Gamesight/slack-workflow-status@master
        if: ${{ always() && env.SLACK_WEBHOOK_URL != 0 }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          name: GitHub Actions
          icon_emoji: ':github-actions:'
          channel: 'C02DQ1A7JLR' # _int_git channel